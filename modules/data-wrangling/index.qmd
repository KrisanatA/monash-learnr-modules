---
title: Data wrangling with R
subtitle: 'In this chapter, you will learn to use tidyr and dplyr from the tidyverse in R for tidying your data set and data maniplulation.'
title-block-banner: yes
engine: knitr
format:
  html:
    from: markdown+emoji
filters:
    - webr-teachr
webr:
    packages: [palmerpenguins, rlang, dplyr, tidyr]
---

```{r}
#| echo: false
#| output: false

# library
library(palmerpenguins)
library(tidyverse)
```

# Introduction to dplyr

**dplyr** provides a selection of tools for the most common data wrangling tasks. There are a few simple yet handy functions.

* `select()`
* `filter()`
* `arrange()`
* `mutate()`
* `group_by()` along with `ungroup()`
* `count()`
* `case_when()`


## select()

This function allows you to pick particular variables from your data.

```{r}
#| eval: false

data |>
    select(variable)
```

This is not only limited to one variable selection. You can select multiple variables by separating the column name with the comma.

```{r}
#| eval: false

data |>
    select(variable1, variable2)
```

::: {.callout-caution}
## Your turn!
We will be using penguin data from the palmerpenguins package.

Let's say that you want to look at whether the **body mass** changes over the **year**.

Hint: To look at the column names of the data, you can use the functions `colnames()`
:::

```{webr-teachr}
# library the packages needed
library(palmerpenguins)
library(dplyr)

# Select the column of interests
penguins |>
    <<select(body_mass_g, year)>>

???

c(
    "Did you use the right function?" != search_ast(.code, .fn = select),
    "Did you pick the right variable?" != all(c("body_mass_g", "year") %in% all.vars(.code))
)
```

### Selection helpers

There are many helper functions that allow you to select variables by matching the patterns in the column's name. Let's look at a few examples.

* `starts_with()`: select all variables that start with a prefix.

```{r}
penguins |>
    select(starts_with("bill")) |>
    head()
```

* `ends_with()`: select all variables that ends with a suffix.

```{r}
penguins |>
    select(ends_with("mm")) |>
    head()
```

* `contains()`: select all variables that contains a literal string.

```{r}
penguins |>
    select(contains("length")) |>
    head()
```

* `num_range()`: select all variables that matches a numerical range like x01, x02, x03.

```{r}
billboard |> 
    select(num_range("wk", 10:15)) |>
    head()
```


## filter()

This allow you to extract observation from the data based on a given condition.

```{r}
#| eval: false

data |>
    filter(expression)
```

For the expression field, there are many functions and operators that are useful for constructing the expressions.

* `==`, `>`, `>=` etc
* `&`, `|`, `!`, `xor()`
* `is.na()`
* `between()`, `near()`

```{r}
penguins |>
    filter(species == "Gentoo") |>
    head()
```


## arrange()

It is for sorting your data based on one or more variables. By default, it will arrange your data in ascending order. If you want to sort by descending order, it can be done using the `desc()` function.

```{r}
penguins |>
    arrange(bill_length_mm) |>
    head()

penguins |>
    arrange(desc(bill_length_mm)) |>
    head()
```

::: {.callout-tip}
## Did you know

What do you think will happen if you sort the penguin's data by the species where it is a character variable? If you guess that it will sort in **alphabetical order**, you are correct!!!
:::


## mutate()

This function is for creating new variable or modify the existing one.

```{r}
#| eval: false

data |>
    mutate(variable_name = value)
```

The **"variable_name"**, this can be the existing variable you are going to modify or  new variable name you are trying to create. The **"value"** is what will be assigned to the **"variable_name"**.

Here is an example on using mutata function to modify the **existing** variable

```{r}
penguins |>
    mutate(sex = ifelse(sex == "male", "M", "F")) |>
    select(species, sex) |>
    head()
```

::: {.callout-caution}
## Your turn!
Let said that you think that the body mass of the penguins should be expressed as kilogram instead of gram. How could you create a **new** variable? Make sure you name it as `body_mass_kg`.

Hint: The conversion from gram to kilogram can be expressed in a forms of $kg = g/1000$
:::

```{webr-teachr}
# library the packages needed
library(palmerpenguins)
library(dplyr)

# Select the column of interests
penguins |>
    <<mutate(body_mass_kg = body_mass_g/1000)>>

???

c(
    "Did you use the right function?" != search_ast(.code, .fn = mutate),
    "Did you provide the right expression?" != search_ast(.code, .expr = body_mass_g/1000)
)
```

